<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://jiaqiwang98.github.io</id>
    <title>Jiaqi`s Blog</title>
    <updated>2021-11-08T06:33:48.231Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://jiaqiwang98.github.io"/>
    <link rel="self" href="https://jiaqiwang98.github.io/atom.xml"/>
    <subtitle>To be a better one.</subtitle>
    <logo>https://jiaqiwang98.github.io/images/avatar.png</logo>
    <icon>https://jiaqiwang98.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Jiaqi`s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Objective-C「Runtime机制」学习记录]]></title>
        <id>https://jiaqiwang98.github.io/post/objective-cruntime-ji-zhi-xue-xi-ji-lu/</id>
        <link href="https://jiaqiwang98.github.io/post/objective-cruntime-ji-zhi-xue-xi-ji-lu/">
        </link>
        <updated>2021-11-07T08:52:35.000Z</updated>
        <summary type="html"><![CDATA[<p>阅读这篇文章你将知道OC消息转发的三步处理可以用来做什么</p>
]]></summary>
        <content type="html"><![CDATA[<p>阅读这篇文章你将知道OC消息转发的三步处理可以用来做什么</p>
<!-- more -->
<h3 id="最推荐阅读">最推荐阅读🌟：</h3>
<p>《iOS 开发：『Runtime』详解（一）基础知识》 https://bujige.net/blog/iOS-Runtime-01.html</p>
<h3 id="其他推荐阅读">其他推荐阅读：</h3>
<p>《Objective-C Runtime》https://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/</p>
<p>网络上关于Objective-C Runtime总结文章非常多，我这里就取最最精华的部分，只放两篇。其中第一篇是我看过的条理最清晰，最易懂的Runtime文章。</p>
<h3 id="我的学习与思考">我的学习与思考：</h3>
<p>我在阅读介绍Runtime的博客时发现，所有的文章都会讲<code>[dog run];</code>这样一个调用流程（不了解Objective-C语法的可以认为是dog对象调用了run()函数）：</p>
<blockquote>
<p>首先会进行<strong>消息发送</strong>，去dog对象所属类的函数表(methodLists)中去找是否实现了run函数，实现了则执行run函数。如果没有实现run函数，Objective-C的Runtime则会进入<strong>消息转发</strong>流程，进行<strong>消息动态解析</strong>，<strong>消息接受者重定向</strong>，<strong>消息重定向</strong>三步处理，如果这三步处理都失败了，就会抛出我们熟悉的<code>unrecognized selector sent to instance</code>异常。</p>
</blockquote>
<p>但是却很少有文章提到我们能用消息转发的这三处理来做什么。通过问组里的大哥和查阅资料了解到，<strong>消息转发的三步流程</strong>在业务上使用较少，主要使用在程序的<strong>crash防护</strong>中，这就解答了我的困惑。下面用一个demo来展示下是如何利用消息转发机制对<code>unrecognized selector sent to instance</code>这种crash进行防护的。</p>
<p>当<code>[dog run]</code>中run函数没有实现时，消息转发给我们提供了三步处理来挽回。<br>
1.在<strong>消息动态解析</strong>中调用<code>+resolveInstanceMethod:</code>为该类动态添加函数的实现<br>
2.在<strong>消息接受者重定向</strong>中调用<code>-forwardingTargetForSelector:</code>将消息转发给别的对象（仅限一个），看看ta有没有实现run函数<br>
3.在<strong>消息重定向</strong>中调用<code>-forwardInvocation:</code>将消息转给多个对象，再试一下</p>
<h3 id="demo实现">Demo实现：</h3>
<p>这里我们在第2步进行拦截，为什么是在第2步，网易前端技术团队https://neyoufan.github.io/2017/01/13/ios/BayMax_HTSafetyGuard/ 给了原因</p>
<blockquote>
<ol>
<li>+resolveInstanceMethod: 需要在类的本身上动态添加它本身不存在的方法，这些方法对于该类本身来说冗余的</li>
<li>-forwardInvocation:可以通过NSInvocation的形式将消息转发给多个对象，但是其开销较大，需要创建新的NSInvocation对象，并且forwardInvocation的函数经常被使用者调用，来做多层消息转发选择机制，不适合多次重写</li>
<li>-forwardingTargetForSelector:可以将消息转发给一个对象，开销较小，并且被重写的概率较低，适合重写</li>
</ol>
</blockquote>
<h4 id="1为nsobject添加hook拦截-forwardingtargetforselector">1.为NSObject添加Hook拦截<code>-forwardingTargetForSelector:</code></h4>
<p>Hook用于拦截系统<code>-forwardingTargetForSelector:</code>的执行，替换为我们重写的<code>- (id)crashProtector_forwardingTargetForSelector:</code></p>
<pre><code class="language-Objective-C">#import &quot;NSObject+HookJQ.h&quot;

@implementation NSObject (HookJQ)

+ (void)crashProtectorSwizzlingClass:(Class)class
                    originalSelector:(SEL)originalSelector
                    swizzledSelector:(SEL)swizzledSelector{
    [self swizzlingInstanceMethodWithClass:class originalSelector:originalSelector swizzledSelector:swizzledSelector];
}

- (void)swizzlingInstanceMethodWithClass:(Class)class
                        originalSelector:(SEL)originalSelector
                        swizzledSelector:(SEL)swizzledSelector{
    Method originalMethod = class_getInstanceMethod(class, originalSelector);
    Method swizzledMethod = class_getInstanceMethod(class, swizzledSelector);

    method_exchangeImplementations(originalMethod, swizzledMethod);
}
@end
</code></pre>
<h4 id="2重写-forwardingtargetforselector方法">2.重写<code>-forwardingTargetForSelector:</code>方法</h4>
<p>动态创建名为crashProtectorClass的crashProtector类，并为其动态添加一个方法，文中的方法传入什么都直接返回0，然后把消息转发到这个动态创建的类的实例对象，完成crash防护。</p>
<pre><code class="language-Objective-C">#import &quot;NSObject+CrashProtectorJQ.h&quot;
#import &quot;NSObject+HookJQ.h&quot;
@implementation NSObject (CrashProtectorJQ)

+ (void)load{
    //拦截系统的方法，替换成我们的实现
    [NSObject crashProtectorSwizzlingClass:[NSObject class] originalSelector:@selector(forwardingTargetForSelector:) swizzledSelector:@selector(crashProtector_forwardingTargetForSelector:)];
}

//重写的forwardingTargetForSelector:方法
- (id)crashProtector_forwardingTargetForSelector:(SEL)aSelector{
    //随意动态创建一个类
    Class crashProtectorClass = NSClassFromString(@&quot;crashProtector&quot;);
    if (!crashProtectorClass) {
        crashProtectorClass = objc_allocateClassPair([NSObject class], &quot;crashProtector&quot;, 0);
        //注册该类
        objc_registerClassPair(crashProtectorClass);
    }
    //如果该类没有实现那个方法，动态添加一个实现
    if (!class_getInstanceMethod(NSClassFromString(@&quot;crashProtector&quot;), aSelector)) {
        class_addMethod(crashProtectorClass, aSelector, (IMP)crashPro, &quot;@@:@&quot;);
    }
    //转发到crashProtector的实例对象
    return [crashProtectorClass new];
}
int crashPro(id slf ,SEL selector){
    return 0;
}
@end
</code></pre>
<h4 id="3测试">3.测试</h4>
<p>新建一个类TestObj继承自NSObject，声明thisEmptyMethod方法，但不实现</p>
<pre><code class="language-Objective-C">#import &lt;Foundation/Foundation.h&gt;
NS_ASSUME_NONNULL_BEGIN

@interface TestObj : NSObject

- (void)thisEmptyMethod;

@end

@implementation TestObj

@end
</code></pre>
<p>程序可以正常运行，不会crash<br>
<img src="https://jiaqiwang98.github.io/post-images/1636285817532.png" alt="" loading="lazy"></p>
<p>注释掉crash防护方法，发生<code>unrecognized selector sent to instance</code>异常，程序崩溃<br>
<img src="https://jiaqiwang98.github.io/post-images/1636285926681.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日学习记录]]></title>
        <id>https://jiaqiwang98.github.io/post/mei-ri-xue-xi-ji-lu/</id>
        <link href="https://jiaqiwang98.github.io/post/mei-ri-xue-xi-ji-lu/">
        </link>
        <updated>2021-10-31T10:47:15.000Z</updated>
        <content type="html"><![CDATA[<p>2021-10-28 （没有看完）<br>
Objective-C Runtime的原理 http://yulingtianxia.com/blog/2014/11/05/objective-c-runtime/<br>
《程序员的自我修养-链接、装载与库》<br>
2021-10-29<br>
【复习】Objective-C中的copy（需要手写demo验证下）<br>
先了解几个概念<br>
深拷贝与浅拷贝:<br>
浅拷贝：只复制指向某个对象的指针，而不复制对象本身，新旧对象使用同一块缓存<br>
深拷贝：创造一个一样的新对象，新对象与原对象内存不共用，修改新对象不会改到原对象<br>
OC的系统非容器类对象：NSString，NSNumber<br>
对于不可变对象NSString，进行copy，会得到不可变对象，而且是浅拷贝<br>
对于不可变对象NSString，进行mutableCopy，会得到可变对象NSMutableString，而且是深拷贝<br>
对于可变对象NSMutableString，进行copy，会得到不可变对象NSString，而且是深拷贝<br>
对于可变对象NSMutableString，进行mutableCopy，会得到可变对象，而且是深拷贝<br>
OC的系统容器类对象：可以按字面意思理解“容器类”指数组NSArray、字典NSDictionary这种容纳多个元素的对象<br>
自定义对象的拷贝：必须实现NSCopying协议，深拷贝与浅拷贝由copyWithZone方法的实现来控制<br>
参考：<br>
https://blog.csdn.net/qq_16844001/article/details/51887118?utm_medium=distribute.pc_relevant.none-task-blog-2<sub>default</sub>baidujs_title~default-1.no_search_link&amp;spm=1001.2101.3001.4242.2<br>
2021-10-31<br>
平台业务新人分享课程《深入浅出runtime》<br>
Objective-C是一门运行时语言<br>
Runtime可以在运行时创建类、修改类、对象和方法<br>
2021-11-02<br>
《iOS多线程：『GCD』详尽总结》<br>
https://juejin.cn/post/6844903566398717960#heading-17<br>
文章来自一个大佬的博客：https://bujige.net/ 大佬讲解GCD非常透彻，非常喜欢这类的博客。有技术有生活有温度～</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[关于]]></title>
        <id>https://jiaqiwang98.github.io/post/about/</id>
        <link href="https://jiaqiwang98.github.io/post/about/">
        </link>
        <updated>2019-01-25T11:09:48.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<blockquote>
<p>欢迎来到我的Blog呀，很高兴遇见你！🤝</p>
</blockquote>
<h2 id="关于本站">🏠 关于本站</h2>
<h2 id="博主是谁">👨‍💻 博主是谁</h2>
<p>iOS Client Research &amp; Development @ ByteDance User Growth(UG) Group</p>
<h2 id="兴趣爱好">⛹ 兴趣爱好</h2>
<h2 id="联系我呀">📬 联系我呀</h2>
]]></content>
    </entry>
</feed>